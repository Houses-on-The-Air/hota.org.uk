<?php
require('fpdf/fpdf.php');
require_once __DIR__ . '/includes/autoload.php';

/**
 * AwardCertificate class for generating HOTA award certificates
 */
class AwardCertificate extends FPDF {
    /**
     * @var string Operator's callsign
     */
    private $callsign;

    /**
     * @var string Award tier achieved
     */
    private $tier;

    /**
     * @var string Certificate issue date
     */
    private $date;

    /**
     * @var array Color definitions
     */
    private $colors = [
        'title' => [51, 51, 51],     // Dark grey
        'border' => [70, 130, 180],  // Steel blue
        'heading' => [0, 51, 102],   // Dark blue
        'text' => [0, 0, 0]          // Black
    ];

    /**
     * @var array Certificate design options
     */
    private $options = [];

    /**
     * Constructor
     *
     * @param string $callsign Operator's callsign
     * @param string $tier Award tier achieved
     * @param array $options Optional certificate design options
     */
    public function __construct($callsign, $tier, array $options = []) {
        parent::__construct('L', 'mm', 'A4');
        $this->callsign = $callsign;
        $this->tier = $tier;
        $this->date = date('F j, Y'); // More readable date format (e.g., March 15, 2023)

        // Default options
        $defaultOptions = [
            'showBorder' => true,
            'showLogo' => true,
            'backgroundColor' => [255, 255, 255], // White
            'logoPath' => 'images/hota-dualcolor.svg',
            'additionalText' => null,
            'borderStyle' => 'ornate', // simple, ornate, double
        ];

        // Merge with user options
        $this->options = array_merge($defaultOptions, $options);

        // Set document properties
        $this->SetTitle("HOTA Certificate - $callsign");
        $this->SetAuthor('Houses on The Air');
        $this->SetCreator('Houses on The Air Certificate Generator');
        $this->SetSubject("$tier Award Certificate for $callsign");
        $this->SetKeywords("HOTA, amateur radio, $tier, $callsign, certificate");
    }

    /**
     * Page header
     */
    public function Header() {
        // No header content needed
    }

    /**
     * Page footer
     */
    public function Footer() {
        $this->SetY(-15);
        $this->SetFont('Arial', 'I', 8);
        $this->SetTextColor(128, 128, 128);
        $this->Cell(0, 10, 'This certificate was generated by Houses on The Air - https://hota.org.uk', 0, 0, 'C');
    }

    /**
     * Draw decorative border based on style
     */
    public function DecorativeBorder() {
        if (!$this->options['showBorder']) {
            return;
        }

        switch ($this->options['borderStyle']) {
            case 'simple':
                $this->SimpleFrameBorder();
                break;
            case 'double':
                $this->DoubleFrameBorder();
                break;
            case 'ornate':
            default:
                $this->OrnateFrameBorder();
                break;
        }
    }

    /**
     * Draw simple border
     */
    private function SimpleFrameBorder() {
        $this->SetLineWidth(1);
        $this->SetDrawColor(...$this->colors['border']);
        $this->Rect(10, 10, 277, 190, 'D');
    }

    /**
     * Draw double border
     */
    private function DoubleFrameBorder() {
        $this->SetLineWidth(0.5);
        $this->SetDrawColor(...$this->colors['border']);
        $this->Rect(10, 10, 277, 190, 'D');
        $this->Rect(15, 15, 267, 180, 'D');
    }

    /**
     * Draw ornate border with corner decorations
     */
    private function OrnateFrameBorder() {
        // Outer border
        $this->SetLineWidth(1.5);
        $this->SetDrawColor(...$this->colors['border']);
        $this->Rect(10, 10, 277, 190, 'D');

        // Inner border
        $this->SetLineWidth(0.8);
        $this->Rect(15, 15, 267, 180, 'D');

        // Corner decorations
        $size = 10;
        $this->DrawCornerDecoration(10, 10, $size, 'TL');
        $this->DrawCornerDecoration(287, 10, $size, 'TR');
        $this->DrawCornerDecoration(10, 200, $size, 'BL');
        $this->DrawCornerDecoration(287, 200, $size, 'BR');

        // Add flourishes in the corners between borders
        $this->SetLineWidth(0.4);
        $this->DrawFlourish(20, 20, 30, 'TL');
        $this->DrawFlourish(277, 20, 30, 'TR');
        $this->DrawFlourish(20, 185, 30, 'BL');
        $this->DrawFlourish(277, 185, 30, 'BR');
    }

    /**
     * Draw corner decoration
     *
     * @param float $x X coordinate
     * @param float $y Y coordinate
     * @param float $size Size of decoration
     * @param string $position Position (TL, TR, BL, BR)
     */
    private function DrawCornerDecoration($x, $y, $size, $position) {
        $this->SetLineWidth(0.5);

        switch ($position) {
            case 'TL': // Top-left
                $this->Line($x, $y + $size, $x, $y);
                $this->Line($x, $y, $x + $size, $y);
                break;
            case 'TR': // Top-right
                $this->Line($x - $size, $y, $x, $y);
                $this->Line($x, $y, $x, $y + $size);
                break;
            case 'BL': // Bottom-left
                $this->Line($x, $y - $size, $x, $y);
                $this->Line($x, $y, $x + $size, $y);
                break;
            case 'BR': // Bottom-right
                $this->Line($x - $size, $y, $x, $y);
                $this->Line($x, $y, $x, $y - $size);
                break;
        }
    }

    /**
     * Draw decorative flourish in corners
     *
     * @param float $x X coordinate
     * @param float $y Y coordinate
     * @param float $size Size of decoration
     * @param string $position Position (TL, TR, BL, BR)
     */
    private function DrawFlourish($x, $y, $size, $position) {
        $this->SetDrawColor(...$this->colors['border']);

        // Scale factors for different positions
        $xFactor = ($position == 'TR' || $position == 'BR') ? -1 : 1;
        $yFactor = ($position == 'BL' || $position == 'BR') ? -1 : 1;

        // Draw curved line
        $this->Curve(
            $x, $y,
            $x + ($xFactor * $size * 0.3), $y + ($yFactor * $size * 0.1),
            $x + ($xFactor * $size * 0.7), $y + ($yFactor * $size * 0.1),
            $x + ($xFactor * $size), $y
        );

        // Draw second curved line perpendicular to the first
        $this->Curve(
            $x, $y,
            $x + ($xFactor * $size * 0.1), $y + ($yFactor * $size * 0.3),
            $x + ($xFactor * $size * 0.1), $y + ($yFactor * $size * 0.7),
            $x, $y + ($yFactor * $size)
        );
    }

    /**
     * Draw a Bezier curve
     *
     * @param float $x0 Start point x
     * @param float $y0 Start point y
     * @param float $x1 Control point 1 x
     * @param float $y1 Control point 1 y
     * @param float $x2 Control point 2 x
     * @param float $y2 Control point 2 y
     * @param float $x3 End point x
     * @param float $y3 End point y
     */
    private function Curve($x0, $y0, $x1, $y1, $x2, $y2, $x3, $y3) {
        $this->SetLineWidth(0.3);

        // Approximate the curve using multiple line segments
        $precision = 0.1;
        $t = 0;
        $prevX = $x0;
        $prevY = $y0;

        while ($t < 1) {
            $t += $precision;
            if ($t > 1) $t = 1;

            // Calculate point on Bezier curve
            $omt = 1 - $t;
            $omt2 = $omt * $omt;
            $omt3 = $omt2 * $omt;
            $t2 = $t * $t;
            $t3 = $t2 * $t;

            $x = $omt3 * $x0 + 3 * $omt2 * $t * $x1 + 3 * $omt * $t2 * $x2 + $t3 * $x3;
            $y = $omt3 * $y0 + 3 * $omt2 * $t * $y1 + 3 * $omt * $t2 * $y2 + $t3 * $y3;

            $this->Line($prevX, $prevY, $x, $y);

            $prevX = $x;
            $prevY = $y;
        }
    }

    /**
     * Add logo to certificate
     */
    private function AddLogo() {
        if (!$this->options['showLogo'] || !file_exists($this->options['logoPath'])) {
            return;
        }

        $imageInfo = getimagesize($this->options['logoPath']);
        if (!$imageInfo) return;

        // Handle different image types
        $extension = strtolower(pathinfo($this->options['logoPath'], PATHINFO_EXTENSION));

        if ($extension === 'svg') {
            // For SVG, we'll use a placeholder and recommend conversion
            $this->SetXY(20, 20);
            $this->SetFont('Arial', 'I', 8);
            $this->SetTextColor(100, 100, 100);
            $this->Cell(0, 10, '(SVG logo placeholder - convert to PNG/JPEG for display)', 0, 1);
        } else {
            // For other image types, use Image()
            $format = '';
            if (in_array($extension, ['jpg', 'jpeg'])) $format = 'JPEG';
            else if ($extension === 'png') $format = 'PNG';

            if ($format) {
                // Add logo at top left (adjust size as needed)
                $this->Image($this->options['logoPath'], 20, 20, 30, 0, $format);
            }
        }
    }

    /**
     * Generate award certificate
     *
     * @return AwardCertificate Self reference for method chaining
     */
    public function GenerateCertificate() {
        $this->AddPage();

        // Set background color
        if ($this->options['backgroundColor'] !== [255, 255, 255]) {
            $this->SetFillColor(...$this->options['backgroundColor']);
            $this->Rect(0, 0, 297, 210, 'F'); // Fill entire page
        }

        $this->DecorativeBorder();
        $this->AddLogo();

        // Tier-specific colors
        $tierColors = $this->getTierColors($this->tier);
        $titleColor = $tierColors['title'] ?? $this->colors['title'];
        $headingColor = $tierColors['heading'] ?? $this->colors['heading'];

        // Title - Houses On The Air
        $this->SetFont('Arial', 'B', 28);
        $this->SetTextColor(...$titleColor);
        $this->Cell(0, 20, "Houses On The Air", 0, 1, 'C');

        // Award certificate text
        $this->SetFont('Arial', 'B', 22);
        $this->Cell(0, 10, "Award Certificate", 0, 1, 'C');
        $this->Ln(15);

        // Certificate text
        $this->SetFont('Arial', '', 18);
        $this->SetTextColor(...$this->colors['text']);
        $this->Cell(0, 10, "This is to certify that", 0, 1, 'C');
        $this->Ln(10);

        // Callsign - make it prominent
        $this->SetFont('Arial', 'B', 32);
        $this->SetTextColor(...$headingColor);
        $this->Cell(0, 15, $this->callsign, 0, 1, 'C');
        $this->Ln(10);

        // Achievement text
        $this->SetFont('Arial', '', 18);
        $this->SetTextColor(...$this->colors['text']);
        $this->Cell(0, 10, "has achieved the tier of", 0, 1, 'C');
        $this->Ln(10);

        // Tier - make it stand out
        $this->SetFont('Arial', 'B', 32);
        $this->SetTextColor(...$headingColor);
        $this->Cell(0, 15, $this->tier, 0, 1, 'C');
        $this->Ln(15);

        // Additional text if provided
        if ($this->options['additionalText']) {
            $this->SetFont('Arial', 'I', 14);
            $this->SetTextColor(...$this->colors['text']);
            $this->Cell(0, 10, $this->options['additionalText'], 0, 1, 'C');
            $this->Ln(5);
        }

        // Date and website
        $this->SetFont('Arial', '', 16);
        $this->SetTextColor(...$this->colors['text']);
        $this->Cell(0, 10, "Date of Issue: " . $this->date, 0, 1, 'C');

        // Add website with a link
        $this->SetFont('Arial', 'U', 16);
        $this->SetTextColor(0, 0, 255); // Blue for link
        $this->Cell(0, 10, "https://hota.org.uk", 0, 1, 'C', false, 'https://hota.org.uk');

        return $this;
    }

    /**
     * Get color scheme based on tier
     *
     * @param string $tier Award tier
     * @return array Color scheme for the tier
     */
    private function getTierColors($tier) {
        $tierColors = [
            'Mansion' => [
                'title' => [128, 0, 0], // Dark red
                'heading' => [139, 69, 19], // Brown
            ],
            'Victorian Villa' => [
                'title' => [25, 25, 112], // Midnight blue
                'heading' => [72, 61, 139], // Dark slate blue
            ],
            'Country Cottage' => [
                'title' => [0, 100, 0], // Dark green
                'heading' => [34, 139, 34], // Forest green
            ],
            'Townhouse' => [
                'title' => [85, 107, 47], // Dark olive green
                'heading' => [107, 142, 35], // Olive drab
            ],
            'Detached House' => [
                'title' => [70, 130, 180], // Steel blue
                'heading' => [30, 144, 255], // Dodger blue
            ],
            'Semi-Detached House' => [
                'title' => [220, 20, 60], // Crimson
                'heading' => [255, 69, 0], // Orange red
            ],
            'Terraced House' => [
                'title' => [128, 0, 128], // Purple
                'heading' => [186, 85, 211], // Medium orchid
            ],
            'Bedsit' => [
                'title' => [210, 105, 30], // Chocolate
                'heading' => [244, 164, 96], // Sandy brown
            ],
        ];

        return $tierColors[$tier] ?? [
            'title' => $this->colors['title'],
            'heading' => $this->colors['heading'],
        ];
    }
}

/**
 * Get optional design parameters from query string with validation
 */
function getDesignOptions() {
    $options = [];

    // Set border style
    $borderStyle = filter_input(INPUT_GET, 'border', FILTER_SANITIZE_SPECIAL_CHARS);
    if (in_array($borderStyle, ['simple', 'double', 'ornate'])) {
        $options['borderStyle'] = $borderStyle;
    }

    // Background color
    $bgColor = filter_input(INPUT_GET, 'bg', FILTER_SANITIZE_SPECIAL_CHARS);
    if ($bgColor && preg_match('/^[0-9a-fA-F]{6}$/', $bgColor)) {
        // Convert hex color to RGB
        list($r, $g, $b) = sscanf($bgColor, "%02x%02x%02x");
        $options['backgroundColor'] = [$r, $g, $b];
    }

    // Additional text
    $text = filter_input(INPUT_GET, 'text', FILTER_SANITIZE_SPECIAL_CHARS);
    if ($text && strlen($text) <= 100) {
        $options['additionalText'] = $text;
    }

    // Logo display
    $showLogo = filter_input(INPUT_GET, 'logo', FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);
    if ($showLogo !== null) {
        $options['showLogo'] = $showLogo;
    }

    return $options;
}

// Validate input parameters
try {
    if (!isset($_GET['callsign']) || !isset($_GET['tier'])) {
        throw new Exception('Missing required parameters. Both "callsign" and "tier" must be provided.');
    }

    // Sanitize and validate inputs
    $callsign = filter_input(INPUT_GET, 'callsign', FILTER_SANITIZE_SPECIAL_CHARS);
    $tier = filter_input(INPUT_GET, 'tier', FILTER_SANITIZE_SPECIAL_CHARS);

    if (empty($callsign) || empty($tier)) {
        throw new Exception("Invalid callsign or tier parameters");
    }

    // Load configuration
    ConfigManager::load();

    // Validate tier against allowed values
    $allowedTiers = ConfigManager::get('award_tiers', []);
    if (!in_array($tier, array_values($allowedTiers)) && $tier !== "Cardboard Box") {
        throw new Exception("Invalid tier: $tier");
    }

    // Get customization options
    $designOptions = getDesignOptions();

    // Create and output certificate
    $certificate = new AwardCertificate($callsign, $tier, $designOptions);
    $certificate->GenerateCertificate();
    $certificate->Output('I', 'HOTA_Certificate_' . preg_replace('/[^a-zA-Z0-9]/', '', $callsign) . '.pdf');

} catch (Exception $e) {
    http_response_code(500);
    echo "Error generating certificate: " . htmlspecialchars($e->getMessage());
    error_log("Certificate generation error: " . $e->getMessage());
}
?>
